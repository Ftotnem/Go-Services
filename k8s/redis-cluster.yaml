apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: minecraft-cluster
  labels:
    app: redis-cluster
spec:
  ports:
  - port: 6379
    name: redis
  - port: 16379
    name: cluster
  clusterIP: None # This makes it a headless service
  selector:
    app: redis-cluster
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: minecraft-cluster
data:
  redis.conf: |
    port 6379
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    appendonly yes
    protected-mode no 
    bind 0.0.0.0
    loglevel notice
    cluster-announce-hostname $(HOSTNAME) # CORRECTED: Use $(HOSTNAME) for stable pod identity
    cluster-preferred-endpoint-type hostname
  
  bootstrap.sh: |
    #!/bin/bash
    set -e

    # Start Redis in the background
    echo "Starting Redis server..."
    redis-server /etc/redis/redis.conf &
    REDIS_PID=$!

    # Wait for this specific Redis instance to be locally reachable.
    # This ensures the 'ping' readiness probe will eventually pass.
    echo "Waiting for local Redis instance to be ready for ping..."
    while ! redis-cli ping > /dev/null 2>&1; do
        echo "Waiting for local Redis ping..."
        sleep 2
    done
    echo "Local Redis instance is pingable."

    # Check if we're already part of a cluster.
    # This check is crucial for restarted nodes with persistent data.
    if redis-cli cluster info | grep -q "cluster_state:ok"; then
        echo "Already part of a working cluster. Exiting bootstrap phase and keeping Redis running."
        wait $REDIS_PID # Keep Redis running indefinitely
        exit 0
    fi

    # This is the first node (redis-cluster-0) logic for initial cluster creation
    if [[ "$HOSTNAME" == "redis-cluster-0" ]]; then
        echo "This is redis-cluster-0, initiating cluster formation if necessary..."

        # Wait for all other nodes to be individually reachable (pingable)
        # This is important before attempting to create the cluster.
        echo "Waiting for all other Redis nodes to become individually reachable (pingable)..."
        for i in {1..5}; do
            POD_FQDN="redis-cluster-$i.redis-cluster.minecraft-cluster.svc.cluster.local"
            while ! redis-cli -h "$POD_FQDN" ping > /dev/null 2>&1; do
                echo "Waiting for $POD_FQDN to be pingable..."
                sleep 5
            done
            echo "$POD_FQDN is pingable."
        done

        # Try to create cluster
        echo "Attempting to create Redis cluster..."
        NODES=""
        for i in {0..5}; do
            NODES="$NODES redis-cluster-$i.redis-cluster.minecraft-cluster.svc.cluster.local:6379"
        done

        # Reset any existing cluster state first for a clean creation
        echo "Resetting cluster state on all nodes (if any exists)..."
        for i in {0..5}; do
            POD_FQDN="redis-cluster-$i.redis-cluster.minecraft-cluster.svc.cluster.local"
            timeout 10 redis-cli -h "$POD_FQDN" cluster reset hard 2>/dev/null || true
        done
        sleep 5 # Give some time for resets to propagate

        # Create new cluster
        echo "Executing cluster creation command..."
        # The --cluster-yes is for automated, non-interactive creation
        if ! redis-cli --cluster create $NODES --cluster-replicas 1 --cluster-yes; then
            echo "ERROR: Failed to create Redis cluster. This pod might restart and retry."
            exit 1 # Exit with an error to force Kubernetes to restart the pod
        fi
        echo "Redis cluster creation initiated by redis-cluster-0."

    else
        echo "Not the primary node ($HOSTNAME). Waiting for cluster to be formed..."
        # Other nodes simply start their Redis instance and wait for the cluster
        # to be formed by redis-cluster-0, or for their persistent nodes.conf
        # to allow them to rejoin.
        while ! redis-cli cluster info | grep -q "cluster_state:ok"; do
            echo "$HOSTNAME: Cluster not yet formed or healthy, waiting..."
            sleep 10
        done
        echo "$HOSTNAME: Cluster is ready, this node has joined/rejoined."
    fi

    # Keep Redis running indefinitely after bootstrap
    echo "Bootstrap complete. Keeping Redis server running..."
    wait $REDIS_PID
    echo "Redis server stopped." # This line should ideally never be reached
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: minecraft-cluster
spec:
  serviceName: "redis-cluster"
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        command: ["/bin/sh"]
        args: ["/etc/redis/bootstrap.sh"]
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 16379
          name: cluster
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: redis-data
          mountPath: /data
        env:
        # HOSTNAME is crucial for cluster-announce-hostname
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: redis-config
        configMap:
          name: redis-cluster-config
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi
