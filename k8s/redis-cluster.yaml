---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: minecraft-cluster
data:
  # Base Redis configuration. The cluster-announce directives will be added dynamically.
  redis.conf: |
    port 6379
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    appendonly yes
    protected-mode no
  # This script will be executed by the Redis container to set up the config
  # and start the server.
  start-redis.sh: |
    #!/bin/sh
    # Define the path for the final configuration file
    FINAL_REDIS_CONF="/data/redis.conf"

    # Start building the final configuration file
    # Read the base config from the ConfigMap and write it to the final location
    cat /etc/redis/redis.conf > "$FINAL_REDIS_CONF"

    # Dynamically append the cluster-announce directives using the POD_NAME
    echo "cluster-announce-hostname ${POD_NAME}.redis-cluster.minecraft-cluster.svc.cluster.local" >> "$FINAL_REDIS_CONF"
    echo "cluster-announce-port 6379" >> "$FINAL_REDIS_CONF"
    echo "cluster-announce-bus-port 16379" >> "$FINAL_REDIS_CONF"

    # Log the final configuration for debugging purposes (optional, but helpful)
    echo "--- Final Redis Configuration ---"
    cat "$FINAL_REDIS_CONF"
    echo "-------------------------------"

    # Execute Redis server with the dynamically generated config
    exec redis-server "$FINAL_REDIS_CONF"
---
apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: minecraft-cluster
  labels:
    app: redis-cluster
spec:
  clusterIP: None # Headless Service for stable network identities
  ports:
  - port: 6379
    name: client
  - port: 16379
    name: gossip
  selector:
    app: redis-cluster
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: minecraft-cluster
spec:
  serviceName: "redis-cluster"
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:6.2.6 # Using a stable Redis version. Adjust if you use a different one.
        # Use the custom start-redis.sh script as the entrypoint
        command: ["/bin/sh", "/etc/redis/start-redis.sh"]
        env:
          # This environment variable captures the stable hostname of the pod
          # (e.g., redis-cluster-0, redis-cluster-1, etc.)
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
        ports:
        - containerPort: 6379
          name: client
        - containerPort: 16379
          name: gossip
        volumeMounts:
        - name: redis-data
          mountPath: /data # Persistent storage for Redis data and nodes.conf
        - name: redis-config # Mount the ConfigMap containing redis.conf and start-redis.sh
          mountPath: /etc/redis # Mount to /etc/redis
      volumes:
      - name: redis-config
        configMap:
          name: redis-cluster-config # Reference the ConfigMap defined above
          defaultMode: 0755 # Ensure the script is executable
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ] # Or ReadWriteMany if your storage supports it
      storageClassName: standard # IMPORTANT: Ensure this StorageClass exists in your K8s cluster
      resources:
        requests:
          storage: 1Gi # Adjust storage as needed
