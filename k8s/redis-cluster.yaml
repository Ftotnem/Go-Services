apiVersion: v1
kind: Service
metadata:
  name: redis-cluster
  namespace: minecraft-cluster
  labels:
    app: redis-cluster
spec:
  ports:
  - port: 6379
    name: redis
  - port: 16379
    name: cluster
  clusterIP: None # This makes it a headless service
  selector:
    app: redis-cluster
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-cluster-config
  namespace: minecraft-cluster
data:
  redis.conf: |
    port 6379
    cluster-enabled yes
    cluster-config-file nodes.conf
    cluster-node-timeout 5000
    appendonly yes
    protected-mode no 
    bind 0.0.0.0
    loglevel notice
    cluster-announce-hostname-prefix redis-cluster
    cluster-preferred-endpoint-type hostname
  
  bootstrap.sh: |
    #!/bin/bash
    set -e
    
    # Start Redis in the background
    redis-server /etc/redis/redis.conf &
    REDIS_PID=$!
    
    # Wait for Redis to start
    sleep 10
    
    # Check if we're already part of a cluster
    if redis-cli cluster info | grep -q "cluster_state:ok"; then
        echo "Already part of a working cluster"
        wait $REDIS_PID
        exit 0
    fi
    
    # Check if this is the first node (redis-cluster-0)
    if [[ "$HOSTNAME" == "redis-cluster-0" ]]; then
        # Wait for all other nodes to be ready
        echo "Waiting for all Redis nodes to be ready..."
        for i in {1..5}; do
            while ! redis-cli -h redis-cluster-$i.redis-cluster.minecraft-cluster.svc.cluster.local ping > /dev/null 2>&1; do
                echo "Waiting for redis-cluster-$i..."
                sleep 5
            done
        done
        
        # Try to create cluster
        echo "Creating Redis cluster..."
        NODES=""
        for i in {0..5}; do
            NODES="$NODES redis-cluster-$i.redis-cluster.minecraft-cluster.svc.cluster.local:6379"
        done
        
        # Reset any existing cluster state first
        for i in {0..5}; do
            redis-cli -h redis-cluster-$i.redis-cluster.minecraft-cluster.svc.cluster.local cluster reset hard 2>/dev/null || true
        done
        
        sleep 5
        
        # Create new cluster
        redis-cli --cluster create $NODES --cluster-replicas 1 --cluster-yes
        
        echo "Cluster created successfully"
    else
        echo "Not the primary node, waiting for cluster to be formed..."
        # Wait for cluster to be formed
        while ! redis-cli cluster info | grep -q "cluster_state:ok"; do
            sleep 10
        done
        echo "Cluster is ready"
    fi
    
    # Keep Redis running
    wait $REDIS_PID
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis-cluster
  namespace: minecraft-cluster
spec:
  serviceName: "redis-cluster"
  replicas: 6
  selector:
    matchLabels:
      app: redis-cluster
  template:
    metadata:
      labels:
        app: redis-cluster
    spec:
      containers:
      - name: redis
        image: redis:7.0-alpine
        command: ["/bin/sh"]
        args: ["/etc/redis/bootstrap.sh"]
        ports:
        - containerPort: 6379
          name: redis
        - containerPort: 16379
          name: cluster
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: redis-data
          mountPath: /data
        env:
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: HOSTNAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        readinessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 15
          periodSeconds: 5
        livenessProbe:
          exec:
            command:
            - redis-cli
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
      volumes:
      - name: redis-config
        configMap:
          name: redis-cluster-config
          defaultMode: 0755
  volumeClaimTemplates:
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 1Gi